class Grid{constructor(i,t,s,e,o,h){this.count_of_points_x=i,this.count_of_points_y=t,this.minimum_distance=s,this.pairing_count=e,this.max_height=o,this.min_height=h,this.width_points=[-width/2],this.height_points=[-height/2],logging.debug(this.count_of_points_x+" random points on x axis."),logging.debug(this.count_of_points_y+" random points on y axis."),this.create_coordinates(),this.columns_count=this.width_points.length-1,this.row_count=this.height_points.length-1,this.boxes_count=this.columns_count*this.row_count,logging.debug("Grid with "+this.columns_count+" columns, "+this.row_count+" rows, "+this.boxes_count+" boxes and "+this.pairing_count+" planned pairings."),this.virtual_boxes=[],this.possible_pairings_x=[],this.possible_pairings_y=[],this.real_boxes=[],this.boxes_completely_run=!1,this.create_virtual_boxes(),this.scout_possible_pairings(),this.real_boxes=this.virtual_boxes;for(var n=0;n<this.pairing_count;n++)this.pairing_count>0&&this.possible_pairings_x.length>0&&this.possible_pairings_y.length>0&&(this.choose_pairing(),this.pair(),this.remove_used_pairs());logging.debug("The real boxes are:"),logging.debug(this.real_boxes),this.delete_boxes(),this.create_boxes()}create_coordinates(){for(let i=0;i<this.count_of_points_x;i++)this.width_points.push(Math.floor(getRandomFromInterval(-width/2,width/2-this.minimum_distance)));for(let i=0;i<this.count_of_points_y;i++)this.height_points.push(Math.floor(getRandomFromInterval(-height/2,height/-this.minimum_distance)));this.width_points.push(width/2),this.height_points.push(height/2),this.width_points.sort((function(i,t){return i-t})),this.height_points.sort((function(i,t){return i-t}));for(var i=this.width_points.length-1;i>=0;i--)this.width_points[i]-this.width_points[i-1]<this.minimum_distance&&this.width_points[i]!=width/2&&this.width_points.splice(i,1);for(i=this.height_points.length-1;i>=0;i--)this.height_points[i]-this.height_points[i-1]<this.minimum_distance&&this.height_points[i]!=height/2&&this.height_points.splice(i,1);logging.debug("Coordinates of points on x axis: "+this.width_points),logging.debug("Coordinates of points on y axis: "+this.height_points)}create_virtual_boxes(){this.label_counter=0;for(let i=0;i<this.row_count;i++)for(let t=0;t<this.columns_count;t++)this.label_counter+=1,this.virtual_boxes.push({label:this.label_counter,a:{x:this.width_points[t],y:this.height_points[i]},b:{x:this.width_points[t+1],y:this.height_points[i]},c:{x:this.width_points[t+1],y:this.height_points[i+1]},d:{x:this.width_points[t],y:this.height_points[i+1]}});logging.debug("Virtual boxes:"),logging.debug(this.virtual_boxes)}scout_possible_pairings(){for(let i=0;i<this.virtual_boxes.length;i++)this.virtual_boxes[i].label%this.columns_count!=0&&this.possible_pairings_x.push({left:this.virtual_boxes[i].label,right:this.virtual_boxes[i+1].label}),this.virtual_boxes[i].label<=this.virtual_boxes.length-this.columns_count&&this.possible_pairings_y.push({left:this.virtual_boxes[i].label,right:this.virtual_boxes[i+this.columns_count].label});logging.debug(this.possible_pairings_x.length+" possible combinations for x:"),logging.debug(this.possible_pairings_x),logging.debug(this.possible_pairings_y.length+" possible combinations for y: "),logging.debug(this.possible_pairings_y)}choose_pairing(){fxrand()>=.5?(this.chosen_axis="x",this.chosen=getRandomFromList(this.possible_pairings_x),logging.debug("Pairing on the x axis with:"),logging.debug(this.chosen)):(this.chosen_axis="y",this.chosen=getRandomFromList(this.possible_pairings_y),logging.debug("Pairing on the y axis with:"),logging.debug(this.chosen))}pair(){let i,t;for(let s of this.virtual_boxes)s.label==this.chosen.left?(i={a:s.a,b:s.b,c:s.c,d:s.d},this.left_label=s.label):s.label==this.chosen.right&&(t={a:s.a,b:s.b,c:s.c,d:s.d},this.right_label=s.label);"x"==this.chosen_axis?this.paired_box={label:this.left_label+"+"+this.right_label,a:{x:i.a.x,y:i.a.y},b:{x:t.b.x,y:t.b.y},c:{x:t.c.x,y:t.c.y},d:{x:i.d.x,y:i.d.y}}:this.paired_box={label:this.left_label+"+"+this.right_label,a:{x:i.a.x,y:i.a.y},b:{x:i.b.x,y:i.b.y},c:{x:t.c.x,y:t.c.y},d:{x:t.d.x,y:t.d.y}},logging.debug("Adding the newly paired box: "),logging.debug(this.paired_box),this.real_boxes.push(this.paired_box),logging.debug("Remove original boxes from array.");for(var s=this.real_boxes.length-1;s>=0;s--)this.real_boxes[s].label==this.left_label&&this.real_boxes.splice(s,1),this.real_boxes[s].label==this.right_label&&this.real_boxes.splice(s,1)}remove_used_pairs(){logging.debug("Remove used pairs from both pools.");for(var i=this.possible_pairings_x.length-1;i>=0;i--)this.possible_pairings_x[i].left!=this.chosen.left&&this.possible_pairings_x[i].left!=this.chosen.right&&this.possible_pairings_x[i].right!=this.chosen.left&&this.possible_pairings_x[i].right!=this.chosen.right||this.possible_pairings_x.splice(i,1);for(i=this.possible_pairings_y.length-1;i>=0;i--)this.possible_pairings_y[i].left!=this.chosen.left&&this.possible_pairings_y[i].left!=this.chosen.right&&this.possible_pairings_y[i].right!=this.chosen.left&&this.possible_pairings_y[i].right!=this.chosen.right||this.possible_pairings_y.splice(i,1)}delete_boxes(){for(var i=this.real_boxes.length-1;i>=0;i--)fxrand()<.1&&this.real_boxes.splice(i,1)}create_boxes(){let i,t,s;for(let e of this.real_boxes)i=getRandomFromInterval(this.min_height,this.max_height),s=i-getRandomFromInterval(0,i-this.min_height),t=getRandomFromList([!0,!1]),e.body=new Box(e.c.x-e.a.x,e.c.y-e.a.y,i,e.a.x,e.a.y,s,t,!t)}show_boxes(){for(let i of this.real_boxes)i.body.show()}check_boxes_complete(){this.boxes_completely_run=!0;for(let i of this.real_boxes)0==i.body.box_complete&&(this.boxes_completely_run=!1)}show_grid_debug(){let i,t;push(),textFont(font),textSize(20*SCALING_FACTOR),rectMode(CORNERS);for(let s of this.real_boxes)noFill(),logging.getLevel()<=1?(strokeWeight(3),stroke(51)):noStroke(),logging.getLevel()<=1&&(rect(s.a.x*SCALING_FACTOR,s.a.y*SCALING_FACTOR,s.c.x*SCALING_FACTOR,s.c.y*SCALING_FACTOR),fill(0),i=(s.b.x-s.a.x)/2*SCALING_FACTOR,t=(s.d.y-s.a.y)/2*SCALING_FACTOR);pop()}}